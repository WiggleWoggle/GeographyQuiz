<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAFAAAANgAAAD8AAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGoAAADlAAAA7wAAAIMAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAP8AAAD/AAAAqgAAACUAAAAKAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTAAAA+wAAAK4AAABGAAAAwAAAAIkAAAAKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAABnAAAASwAAAMUAAAD/AAAA+QAA
        AIcAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1AAAA/QAA
        AP8AAAD/AAAA+QAAAIcAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABAAAACXAAAA/AAAAP8AAAD/AAAA+QAAAIcAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAA8AAACXAAAA/AAAAP8AAAD/AAAA+QAAAIYAAAAKAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAACYAAAA/AAAAP8AAAD/AAAA+QAAAIYAAAAJAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAACYAAAA/AAAAP8AAAD/AAAA4QAA
        ACcAAAAAAAAAAAAAAAAAAAAIAAAALwAAAGIAAACJAAAAmgAAAJYAAACBAAAAVwAAACMAAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAACYAAAA/AAA
        AP8AAAD6AAAAjQAAAAsAAAAFAAAASAAAAK4AAADrAQEA/ggHAP8ODAD/DgwA/wYFAP8AAAD8AAAA4QAA
        AJcAAAAyAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABEAAAB6AAAArwAAAPwAAAD6AAAAlQAAAJEAAADxDAoA/zowAP9rWgD/iHMA/5R8AP+TewD/g24A/2FR
        AP8tJQD/BgUA/wAAAOUAAABwAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAARAAAAmQAAAPwAAAD+AgMD/j1FRP+aoX//wcJ+/8bFd//EwW3/wr5l/8K9
        ZP/Ev2n/xMFu/7q6c/+HjnD/KC0u/wAAAPkAAACMAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA2gMDA/9daGv/yuPo/9v2/P/Y8/v/2PP6/9jz
        +f/Y8/n/2PP5/9jz+f/Y8/n/2PP6/9r1+v+60db/QUhK/wAAAPoBAwF/Bg0GAwEBAQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAD7GjIb/36qjP+iyrf/p828/6fN
        vf+ly7r/osi2/5/Gs/+gx7T/pcu6/6vQwf+v08f/sdTI/6vRwf99o4v/FSIW/wAAAO0AAABFAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmAAAA3AoWCv8xaC//N3Y1/zl3
        N/87eTn/Onk5/zp4OP85dzf/OHc2/zh3N/86eDj/PHo7/z17Pf8+fD7/O3k6/zh4Nv8qWSj/BAkE/wAA
        ALUAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHUAAQD/IUYg/zh4
        Nv83djX/N3Y1/zd2Nf83djX/N3Y1/zd2Nf83djX/N3Y1/zd2Nf82djX/NXUz/zV1NP82dTT/N3Y1/zd1
        Nf8WLxX/AAAA8wAAAEMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAuQcP
        B/8wZy//N3c1/zd2Nf83djX/N3Y1/zd2Nf83djX/N3Y1/zd2Nf82dTX/NHQz/z16Of9PhkT/T4ZE/0qD
        Qf83djX/OHg2/yhWJv8CBAL/AAAAhgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAADfESQQ/zZ0NP83djX/N3Y1/zd2Nf83djX/N3Y1/zd2Nf83djX/NnU0/0N+Pf9nllP/tsuE/+js
        o//n7KP/zduT/02FQv81dTT/N20z/w4VDP8AAAC1AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAMgAAAO8YMxf/N3c1/zd2Nf83djX/N3Y1/zd2Nf83djX/N3Y1/zV1NP9ZjUr/ydiQ//j4
        rf///bP///2z///9s////bP/qsN9/0R/Pf+Kqmj/Ozsp/wAAAM4AAAAUAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA5AAAA8x06G/83dzX/N3Y1/zd2Nf83djX/N3Y1/zd2Nf81dTT/T4ZE/7/M
        if/28qv/5OKf//z5r//++7H///yx///8sv/5+a7/1+GY/+3up/9HRjL/AAAA1AAAABkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEAAADuSVM2/1aLSf81dTT/N3Y1/zd2Nf81dTT/M3Qz/z57
        Ov+0yIL/npxt/9vZov/KyKf/29ms/9XUq////tz///3H///9wv///rr/8/Gp/zo5KP8AAADLAAAAEgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAANtKSTT/t8qE/0J+PP81dTT/OXc2/3uk
        X/+JrWj/ob13//f3sf/m5LD////p/9/f4P/Nzcv/4eHf//X19v////v////6////6f/f3rX/IB8Z/wAA
        ALAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAsRwcFP/V1Jb/or94/0B8
        O/+Ap2P/8/Wr///9sv/+/Lb///7i////+/////7//v7+//7+/v/x8fH/+fn5/////////////////62t
        rv8GBgb/AAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAA/oiH
        YP/6+rD/0d2V/+nspP///rT///yx///8vv////j////////////////////////////8/Pz/+fn5////
        ///4+Pj/VlZW/wAAAPANDQ08DQ0NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABwAAADRJCQZ/9XTlv/v76n/YWBE/6yqeP/9+7L///+5////5/////3////+////////////9fX1/4mJ
        if96enr//v7+/66urv8MDAz/AAAAqRwcHAgYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGEAAAD3Tk03/+TioP+GhV7/Hx8W/3FwT//QzZH/9fKx//37xP/8+97/8PDw/7+/
        wP9VVVX/JSUl/62trf/R0dH/LCws/wAAAOQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAJEBAQH9V1Y9/9/cnP+3tYD/RUQw/yQjGf8+PSv/VFM5/1FQ
        P/82Njb/IyMd/1tbV//Q0ND/ycnJ/zU1Nf8AAAD0AAAAZyYmJgACAgIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAAJgBAAD6NDMk/6qod//k4Z//xsSK/5aU
        aP99e1f/gH5Z/6Cebv/Rz5L/4N63/4+Pjf8eHh7/AAAA8AAAAHIAAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAHIAAADjCAgF/zo5
        Kf9/fVj/rKp4/767hP+8uoP/paNz/3BvTv8rKh3/AwMC/gAAANAAAABSAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AC4AAACMAAAA1AAAAPQDAwL+BwcF/wYGBf8BAQH8AAAA7wAAAMcAAAB2AAAAHQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAcAAAASwAAAHMAAACGAAAAhAAAAGwAAAA/AAAAEwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAD////wf///8D////Af///wD////Af///wD///+Af///wD///+A4Af/wA
        AB/+AAAP/4AAB//AAAP/wAAD/4AAAf+AAAH/AAAB/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAB/4AAAf+A
        AAH/wAAD/8AAB//gAAf/8AAP//gAP//+AP8=
</value>
  </data>
</root>